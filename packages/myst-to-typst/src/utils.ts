import type { GenericNode } from 'myst-common';
import { DEFAULT_IMAGE_WIDTH, DEFAULT_PAGE_WIDTH_PIXELS } from './types.js';
// import emoji from './emoji.json';

/** Removes nobreak and zero-width spaces */
export function cleanWhitespaceChars(text: string, nbsp = ' '): string {
  return text.replace(/\u00A0/g, nbsp).replace(/[\u200B-\u200D\uFEFF]/g, '');
}

// Funky placeholders (unlikely to be written ...?!)
const BACKSLASH_SPACE = 'xxxxBACKSLASHSPACExxxx';
const BACKSLASH = 'xxxxBACKSLASHxxxx';
const COMMENT = 'xxxxCOMMENTxxxx';
const COMMENT_SPACE = 'xxxxCOMMENTSPACExxxx';
const TILDE = 'xxxxTILDExxxx';

const hrefOnlyReplacements: Record<string, string> = {
  // Not allowed characters
  // Typst escaped characters are: \ & ` $ # _ * @ { } [ ] ^
  '&': '\\&',
  '`': '\\`',
  $: '\\$',
  '#': '\\#',
  _: '\\_',
  '*': '\\*',
  '{': '\\{',
  '}': '\\}',
  '[': '\\[',
  ']': '\\]',
  '^': '\\^',
  '@': '\\@',
  ';': '\\;',
};

const textOnlyReplacements: Record<string, string> = {
  ...hrefOnlyReplacements,
  // quotes
  '‚Äô': "'",
  '‚Äò': "'",
  '‚Äù': '"',
  '‚Äú': '"',
  // guillemots
  // '¬ª': '>>', // These could be improved
  // '¬´': '<<',
  // '‚Ä¶': '\\dots',
  // '‚Äì': '--',
  // '‚Äî': '---',
  // Commands gobble fhttps://texfaq.org/FAQ-xspaceollowing space
  // See: https://texfaq.org/FAQ-xspace
  '¬©': '#emoji.copyright ',
  '¬Æ': '#emoji.reg ',
  '‚Ñ¢': '#emoji.tm ',
  '<': '\\<',
  '>': '\\>',
  '¬†': '~',
  '‚ÄØ': '~',
  // eslint-disable-next-line no-irregular-whitespace
  // '‚Äâ': '\\,',
  // ...Object.fromEntries(Object.entries(emoji).map(([k, v]) => [k, `#emoji.${v} `])),
};

const arrows: Record<string, string> = {
  '‚Üî': 'arrow.l.r',
  '‚áî': 'arrow.l.r.double',
  '‚Üí': 'arrow.r',
  '‚áí': 'arrow.r.double',
  '‚Üê': 'arrow.l',
  '‚áê': 'arrow.l.double',
};

const symbols: Record<string, string> = {
  '‚àí': '-', // minus
  '-': '-', // hyphen minus
  'Ôπ£': '-', // Small hyphen minus
  'Ôºç': '-', // Full-width Hyphen-minus
  'Ôºã': '+', // Full-width Plus
};

const textReplacements: Record<string, string> = {
  ...textOnlyReplacements,
  ...arrows,
  ...symbols,
};

const mathReplacements: Record<string, string> = {
  ...arrows,
  ...symbols,
  '¬Ω': '1/2',
  '‚Öì': '1/3',
  '‚Öî': '2/3',
  '¬º': '1/4',
  '‚Öï': '1/5',
  '‚Öñ': '2/5',
  '‚Öó': '3/5',
  '‚Öò': '4/5',
  '‚Öô': '1/6',
  '‚Öö': '5/6',
  '‚Öê': '1/7',
  '‚Öõ': '1/8',
  '‚Öú': '3/8',
  '‚Öù': '5/8',
  '‚Öû': '7/8',
  '‚Öë': '1/9',
  '‚Öí': '1/10',
  '¬±': 'plus.minus',
  '√ó': 'times',
  Œë: 'A',
  Œ±: 'alpha',
  ùú∂: 'alpha',
  Œí: 'B',
  Œ≤: 'beta',
  √ü: 'beta',
  ùú∑: 'beta',
  Œì: 'Gamma',
  Œ≥: 'gamma',
  Œî: 'Delta',
  '‚àÜ': 'Delta',
  Œ¥: 'delta',
  Œï: 'E',
  Œµ: 'epsilon',
  ùù¥: 'epsilon',
  Œñ: 'Z',
  Œ∂: 'zeta',
  Œó: 'H',
  Œ∑: 'eta',
  Œò: 'Theta',
  Œ∏: 'theta',
  œë: 'vartheta',
  Œô: 'I',
  Œπ: 'iota',
  Œö: 'K',
  Œ∫: 'kappa',
  Œõ: 'Lambda',
  Œª: 'lambda',
  Œú: 'M',
  Œº: 'mu',
  Œù: 'N',
  ŒΩ: 'nu',
  Œû: 'Xi',
  Œæ: 'xi',
  Œü: 'O',
  Œø: 'o',
  Œ†: 'Pi',
  œÄ: 'pi',
  Œ°: 'P',
  œÅ: 'rho',
  Œ£: 'Sigma',
  œÉ: 'sigma',
  Œ§: 'T',
  œÑ: 'tau',
  Œ•: 'Upsilon',
  œÖ: 'upsilon',
  Œ¶: 'Phi',
  œï: 'phi.alt',
  œÜ: 'phi',
  Œß: 'X',
  œá: 'chi',
  Œ®: 'Psi',
  œà: 'psi',
  Œ©: 'Omega',
  œâ: 'omega',
  '‚àÇ': 'diff',
  '‚àû': 'infty',
  '‚âà': 'approx',
  '‚â†': 'eq.not',
  '‚Ä¢': 'dot.c',
  // '‚Ä∞': '\\permille',
};

type SimpleTokens = { kind: 'math' | 'text'; text: string };

export function nodeOnlyHasTextChildren(node?: GenericNode) {
  if (!node || !node.children || node.children.length === 0) return false;
  return node.children.reduce((previous, { type }) => previous && type === 'text', true);
}

export function hrefToLatexText(text: string) {
  const replacedArray: SimpleTokens[] = Array.from(text ?? '').map((char) => {
    if (hrefOnlyReplacements[char]) return { kind: 'text', text: hrefOnlyReplacements[char] };
    return { kind: 'text', text: char };
  });

  const replaced = replacedArray
    .reduce((arr, next) => {
      const prev = arr.slice(-1)[0];
      if (prev?.kind === next.kind) prev.text += next.text;
      else arr.push(next);
      return arr;
    }, [] as SimpleTokens[])
    .reduce((s, next) => {
      return s + next.text;
    }, '');

  return replaced;
}

export function stringToTypstText(text: string) {
  const escaped = (text ?? '')
    .replace(/\\ /g, BACKSLASH_SPACE)
    .replace(/\\/g, BACKSLASH)
    .replace(/^\/\//g, COMMENT)
    .replace(/\s\/\//g, COMMENT_SPACE)
    .replace(/~/g, TILDE);

  const replacedArray: SimpleTokens[] = Array.from(escaped).map((char) => {
    if (textReplacements[char]) return { kind: 'text', text: textReplacements[char] };
    if (mathReplacements[char]) return { kind: 'math', text: mathReplacements[char] };
    return { kind: 'text', text: char };
  });

  const replaced = replacedArray
    .reduce((arr, next) => {
      // Join any strings of math or text together (avoids $\delta$$\mu$ --> $\delta\mu$)
      const prev = arr.slice(-1)[0];
      if (prev?.kind === next.kind) prev.text += next.text;
      else arr.push(next);
      return arr;
    }, [] as SimpleTokens[])
    .reduce((s, next) => {
      if (next.kind === 'math') return `${s}$${next.text}$`;
      return s + next.text;
    }, '');

  const final = replaced
    .replace(new RegExp(BACKSLASH_SPACE, 'g'), '\\\\ ')
    .replace(new RegExp(BACKSLASH, 'g'), '\\\\')
    .replace(new RegExp(COMMENT_SPACE, 'g'), ' \\/\\/')
    .replace(new RegExp(COMMENT, 'g'), '\\/\\/')
    .replace(new RegExp(TILDE, 'g'), '$tilde$');
  return cleanWhitespaceChars(final, '~');
}

export function stringToTypstMath(text: string) {
  const replaced = Array.from(text ?? '').reduce((s, char) => {
    if (mathReplacements[char]) {
      const space = s.slice(-1) === ' ' ? '' : ' ';
      return `${s}${space}${mathReplacements[char]}`;
    }
    return s + char;
  }, '');
  const final = replaced.trim();
  return cleanWhitespaceChars(final);
}

export function getLatexImageWidth(width?: number | string): string {
  if (typeof width === 'number' && Number.isNaN(width)) {
    // If it is nan, return with the default.
    return getLatexImageWidth(DEFAULT_IMAGE_WIDTH);
  }
  if (typeof width === 'string') {
    if (width.endsWith('%')) {
      return getLatexImageWidth(Number(width.replace('%', '')));
    } else if (width.endsWith('px')) {
      return getLatexImageWidth(Number(width.replace('px', '')) / DEFAULT_PAGE_WIDTH_PIXELS);
    }
    console.log(`Unknown width ${width} in getLatexImageWidth`);
    return getLatexImageWidth(DEFAULT_IMAGE_WIDTH);
  }
  let lineWidth = width ?? DEFAULT_IMAGE_WIDTH;
  if (lineWidth < 1) lineWidth *= 100;
  return `${lineWidth}%`;
}

export function getClasses(className?: string): string[] {
  const classes =
    className
      ?.split(' ')
      .map((s) => s.trim().toLowerCase())
      .filter((s) => !!s) ?? [];
  return Array.from(new Set(classes));
}
